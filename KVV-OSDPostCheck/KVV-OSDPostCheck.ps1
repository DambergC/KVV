<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by: SAPIEN Technologies, Inc., PowerShell Studio 2025 v5.9.252 (L)
     Modified on:       4/14/2025
     Modified by:       DambergC
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Updated GUI script generated by PowerShell Studio 2025 with improvements.
#>

# Configurable Parameters
param (
    [string]$LogFilePath = "C:\Windows\Temp\OSDPostCheck.log",
    [string]$RegistryWarningCaption = "WARNING",
    [string]$RegistryWarningText = "The system installation is incomplete. Please contact the service desk."
)

#----------------------------------------------
#region Helper Functions
#----------------------------------------------

function Write-Log {
    param (
        [string]$Message
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $LogFilePath -Value "$timestamp - $Message"
}

function Update-RichTextBox {
    param (
        [System.Windows.Forms.RichTextBox]$RichTextBox,
        [string]$Message,
        [System.Drawing.Color]$Color,
        [System.Drawing.FontStyle]$FontStyle
    )
    $RichTextBox.SelectionColor = $Color
    $RichTextBox.SelectionFont = New-Object System.Drawing.Font($RichTextBox.Font, $FontStyle)
    $RichTextBox.AppendText("$Message`n")
}

function Check-TPM {
    try {
        $tpm = Get-CimInstance -Namespace "Root\CIMv2\Security\MicrosoftTpm" -ClassName Win32_Tpm
        if ($tpm.IsEnabled_InitialValue -eq $true) {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "TPM is enabled." -Color [System.Drawing.Color]::Green -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "TPM is enabled."
        } else {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "TPM is not enabled." -Color [System.Drawing.Color]::Red -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "TPM is not enabled."
            $global:IsCompliant = $false
        }
    } catch {
        Write-Log "Error checking TPM: $_"
    }
}

function Check-Certificate {
    try {
        Set-Location cert:\LocalMachine\My
        $LMCertExists = $false
        $LMCertStore = Get-ChildItem

        foreach ($certificate in $LMCertStore) {
            if ($certificate.Subject -like "*$env:COMPUTERNAME*") {
                $LMCertExists = $true
                break
            }
        }

        Set-Location C:
        if ($LMCertExists) {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "Computer certificate exists." -Color [System.Drawing.Color]::Green -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "Computer certificate exists."
        } else {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "Computer certificate does not exist." -Color [System.Drawing.Color]::Red -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "Computer certificate does not exist."
            $global:IsCompliant = $false
        }
    } catch {
        Write-Log "Error checking certificate: $_"
    }
}

function Check-SecureBoot {
    try {
        $SecureBootEnabled = Confirm-SecureBootUEFI
        if ($SecureBootEnabled -eq $true) {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "UEFI Secure Boot is enabled." -Color [System.Drawing.Color]::Green -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "UEFI Secure Boot is enabled."
        } else {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "UEFI Secure Boot is not enabled." -Color [System.Drawing.Color]::Red -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "UEFI Secure Boot is not enabled."
            $global:IsCompliant = $false
        }
    } catch {
        Write-Log "Error checking Secure Boot: $_"
    }
}

function Check-Application {
    param (
        [string]$AppName
    )
    try {
        $InstalledApps = Get-CimInstance -Class Win32_Product
        $InstalledApp = $InstalledApps | Where-Object { $_.Name -like "*$AppName*" }
        if ($InstalledApp) {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "$AppName is installed." -Color [System.Drawing.Color]::Green -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "$AppName is installed."
        } else {
            Update-RichTextBox -RichTextBox $global:RichTextBox1 -Message "$AppName is not installed." -Color [System.Drawing.Color]::Red -FontStyle [System.Drawing.FontStyle]::Bold
            Write-Log "$AppName is not installed."
            $global:IsCompliant = $false
        }
    } catch {
        Write-Log "Error checking application ${AppName}: $_"
    }
}

function Update-Registry {
    try {
        $RegistryPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
        New-ItemProperty -Path $RegistryPath -Name "legalnoticetext" -Value $RegistryWarningText -Force | Out-Null
        New-ItemProperty -Path $RegistryPath -Name "legalnoticecaption" -Value $RegistryWarningCaption -Force | Out-Null
    } catch {
        Write-Log "Error updating registry: $_"
    }
}

#----------------------------------------------
#endregion Helper Functions
#----------------------------------------------

# Main Script Execution
$global:IsCompliant = $true
$RichTextBox1 = New-Object 'System.Windows.Forms.RichTextBox'

Check-TPM
Check-Certificate
Check-SecureBoot
Check-Application -AppName "Trellix Agent"
Check-Application -AppName "MDOP MBAM"
Check-Application -AppName "Office"

if (-not $global:IsCompliant) {
    Update-RichTextBox -RichTextBox $RichTextBox1 -Message "System is not compliant." -Color ([System.Drawing.Color]::Red) -FontStyle [System.Drawing.FontStyle]::Bold
    Update-Registry
} else {
    Update-RichTextBox -RichTextBox $RichTextBox1 -Message "System is compliant." -Color ([System.Drawing.Color]::Green) -FontStyle [System.Drawing.FontStyle]::Bold
    Write-Log "System is compliant."
}
